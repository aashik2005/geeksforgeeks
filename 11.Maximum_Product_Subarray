MAXIMUM PRODUCT SUBARRAY:
Difficulty: Medium || Accuracy: 18.09% || Submissions: 445K+ || Points: 4

Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].
Note: It is guaranteed that the output fits in a 32-bit integer.

Examples
Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.

Input: arr[] = [-1, -3, -10, 0, 6]
Output: 30
Explanation: The subarray with maximum product is {-3, -10} with product = (-3) * (-10) = 30.

SOLUTION

class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        int maxfar=arr[0];
        int maxend=arr[0];
        int minend=arr[0];
        int n=arr.length;
        for(int i=1;i<n;i++){
            int temp=maxend;
            maxend=Math.max(arr[i],Math.max(maxend*arr[i],minend*arr[i]));
            minend=Math.min(arr[i],Math.min(temp*arr[i],minend*arr[i]));
            maxfar=Math.max(maxend,maxfar);
        }
        return maxfar;
    }
}
