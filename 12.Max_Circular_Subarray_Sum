12.MAX CIRCULAR SUBARRAY SUM
Difficulty: HardAccuracy: 29.37%Submissions: 155K+Points: 8Average Time: 25m
Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

Examples:
Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.

Input: arr[] = [10, -3, -4, 7, 6, 5, -4, -1]
Output: 23
Explanation: Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].

Input: arr[] = [-1, 40, -14, 7, 6, 5, -4, -1] 
Output: 52
Explanation: Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.

SOLUTION:

class Solution {
    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {
        int total=0;
        int maxsum=arr[0],curmax=arr[0];
        int minsum=arr[0],curmin=arr[0]; 
        for(int i=1;i<arr.length;i++){
            curmax=Math.max(arr[i],curmax+arr[i]);
            maxsum=Math.max(maxsum,curmax);
            curmin=Math.min(arr[i],curmin+arr[i]);
            minsum=Math.min(minsum,curmin);
            total+=arr[i];
        }
        total+=arr[0];
        if(maxsum<0)return maxsum;
        return Math.max(maxsum,total-minsum);
    }
}
